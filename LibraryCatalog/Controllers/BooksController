using System.Linq;
using Microsoft.AspNetCore.Mvc;
using LibraryCatalog.Data;
using LibraryCatalog.Models;

namespace LibraryCatalog.Controllers
{
    public class BooksController : Controller
    {
        private readonly LibraryContext _context;

        public BooksController(LibraryContext context)
        {
            _context = context;
        }
        public async Task<IActionResult> Index()
        {
            var books = _context.Books.ToList();
            return View(books);
        }
        public IActionResult AddSampleData()
        {
            if(!_context.Books.Any())
            {
                var sampleBooks = new List<Book>
                {
                    new Book
                    {
                        Title = "The Rise and Fall of the Roman Empire",
                        Author = "Edward Gibbon",
                        Genre = "Non-fiction",
                        PublishedDate = new DateTime(1789)
                    },
                    new Book
                    {
                        Title = "A Distant Mirror: The Calamitous 14th Century",
                        Author = "Barbara Tuchman",
                        Genre = "Non-fiction",
                        PublishedDate = new DateTime(1978)
                    },
                    new Book
                    {
                        Title = "Imperial Twilight: The Opium War and the End of China's Last Golden Age",
                        Author = "Stephen R. Platt",
                        Genre = "Non-fiction",
                        PublishedDate = new DateTime(2018)
                    }
                };
                _context.Books.AddRange(sampleBooks);
                _context.SaveChanges();
            }
            return RedirectToAction("Index");
        }
        public async Task<IActionResult> Details(int? id)
        {
            if(id == null)
            {
                return NotFound();
            }
            return View(book);
        }
        public IActionResult Create()
        {
            return View();
        }
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Create([Bind("Id,Title,Author,Genre,PublishedDate")] Book book)
        {
            if(ModelState.IsValid)
            {
                _context.Add(book);
                await _context.SaveChangesAsync();
                return RedirectToAction(nameof(Index));
            }
            return View(book);
        }
        public async Task<IActionResult> Edit(int? id)
        {
            if(id == null)
            {
                return NotFound();
            }
            var book = await _context.Books.FindAsync(id);
            if (book == null)
            {
                return NotFound();
            }
            return View(book)
        }
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Edit(int id, [Bind("Id,Title,Author,Genre,PublishedDate")] Book book)
        {
            if (id != book.Id)
            {
                return NotFound();
            }
            if (!ModelState.IsValid)
            {
                try
                {
                    _context.Update(book);
                    await _context.SaveChangesAsync();
                }
                catch (DbUpdateConcurrencyException)
                {
                    if (!BookExists(book.Id))
                    {
                        return NotFound();
                    }
                    else
                    {
                        throw;
                    }
                }
                return RedirectToAction(nameof(Index));
            }
            return View(book);
        }
        public async Task<IActionResult> Delete(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }
            var book = await _context.Books.FirstorDefaultAsnyc(m => m.Id == id);
            if (book == null)
            {
                return NotFound();
            }
            return View(book);
        }
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> DeleteConfirmed(int id)
        {
            var book = await _context.Books.FindAsync(id);
            _context.Books.Remove(book);
            await _context.SaveChangesAsync();
            return RedirectToAction(nameof(Index));
        }
        private bool BookExists(int id)
        {
            return _context.Books.Any(e => e.Id == id);
        }
    }
}